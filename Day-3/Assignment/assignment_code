/* Minimum average waiting time
Ramu owns a Pan shop and he manages it in his own way. While in a normal shop, a customer is served by following the first-come,
first-served rule, Ramu simply minimizes the average waiting time of his customers. So he gets to decide who is served first,
regardless of how sooner or later a person comes.*/
#include<iostream>
#include<queue>
#include<vector>
#include<algorithm>
using namespace std;
struct customer
{
long long arrTime;
long long cookTime;
long long index;
};
bool compare( customer& a, customer& b)
{
return a.arrTime<b.arrTime;
}
struct Compare1
{
bool operator()(customer a,customer b)
{
return a.cookTime>b.cookTime;
}
};
struct Compare2
{
bool operator()(customer a,customer b)
{
return a.arrTime>b.arrTime;
}
};
int main()
{
vector<customer>c;
vector<bool>done;
long long n;
cin>>n;
for(long long i=0;i<n;i++)
{
customer cust;
cin>>cust.arrTime;
cin>>cust.cookTime;
cust.index=i;
c.push_back(cust);
done.push_back(false);
}
priority_queue<customer,vector<customer>,Compare2>arrivalList;
for(long long i=0;i<n;i++)
arrivalList.push(c[i]);

priority_queue<customer,vector<customer>,Compare1> waitList;
vector<long long>tat(n);
vector<long long>ct(n);

//next step- priority queue work starts
long long count=0;
long long totalTime=0;

while(count!=n)
{
while(!arrivalList.empty() && arrivalList.top().arrTime<=totalTime)
{
waitList.push(arrivalList.top());
arrivalList.pop();
}
customer next;
if(!waitList.empty())
{
next=waitList.top();
//cout<<"Job "<<next.index<<endl;
waitList.pop();
totalTime+=next.cookTime;
ct[next.index]=totalTime;
done[next.index]=true;
count++;

}
else if(!arrivalList.empty())
{
next=arrivalList.top();
//cout<<"Job "<<next.index<<endl;
arrivalList.pop();
totalTime+=next.cookTime;
ct[next.index]=totalTime;
done[next.index]=true;
count++;
}

}
long long sum=0;
for(long long i=0;i<n;i++)
{
tat[i]=ct[i]-c[i].arrTime;
sum+=tat[i];
}
cout<<sum/n;
return 0;
}
